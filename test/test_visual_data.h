/* Test for Unicode Algorithms Implementation.
 * License: Public Domain or MIT - choose whatever you want.
 * See LICENSE.md */

const char* broken_utf8_test[] =
{
    "Valid UTF-8",
    "",
    "Latin (1 code unit per code point) (41 42 43)",
    "ABC",
    "Cyrilic (2 code units per code point) (D0 90 D0 91 D0 92)",
    "\xD0\x90\xD0\x91\xD0\x92",
    "Halfwidth and Fullwidth Forms (3 code units per code point) (EF BC A1 EF BC A2 EF BC A3)",
    "\xEF\xBC\xA1\xEF\xBC\xA2\xEF\xBC\xA3",
    "Mathematical Alphanumeric Symbols (4 code units per code point) (F0 9D 90 80 F0 9D 90 81 F0 9D 90 82)",
    "\xF0\x9D\x90\x80\xF0\x9D\x90\x81\xF0\x9D\x90\x82",
    "",
    "",
    "Broken UTF-8",
    "",
    "Based on file from this article: https://hsivonen.fi/broken-utf-8",
    "",
    "Non-shortest forms for lowest single-byte (U+0000)",
    "",
    "Two-byte sequence (C0 80)",
    "\xC0\x80",
    "Three-byte sequence (E0 80 80)",
    "\xE0\x80\x80",
    "Four-byte sequence (F0 80 80 80)",
    "\xF0\x80\x80\x80",
    "Five-byte sequence (F8 80 80 80 80)",
    "\xF8\x80\x80\x80\x80",
    "Six-byte sequence (FC 80 80 80 80 80)",
    "\xFC\x80\x80\x80\x80\x80",
    "",
    "Non-shortest forms for highest single-byte (U+007F)",
    "",
    "Two-byte sequence (C1 BF)",
    "\xC1\xBF",
    "Three-byte sequence (E0 81 BF)",
    "\xE0\x81\xBF",
    "Four-byte sequence (F0 80 81 BF)",
    "\xF0\x80\x81\xBF",
    "Five-byte sequence (F8 80 80 81 BF)",
    "\xF8\x80\x80\x81\xBF",
    "Six-byte sequence (FC 80 80 80 81 BF)",
    "\xFC\x80\x80\x80\x81\xBF",
    "",
    "Non-shortest forms for lowest two-byte (U+0080)",
    "",
    "Three-byte sequence (E0 82 80)",
    "\xE0\x82\x80",
    "Four-byte sequence (F0 80 82 80)",
    "\xF0\x80\x82\x80",
    "Five-byte sequence (F8 80 80 82 80)",
    "\xF8\x80\x80\x82\x80",
    "Six-byte sequence (FC 80 80 80 82 80)",
    "\xFC\x80\x80\x80\x82\x80",
    "",
    "Non-shortest forms for highest two-byte (U+07FF)",
    "",
    "Three-byte sequence (E0 9F BF)",
    "\xE0\x9F\xBF",
    "Four-byte sequence (F0 80 9F BF)",
    "\xF0\x80\x9F\xBF",
    "Five-byte sequence (F8 80 80 9F BF)",
    "\xF8\x80\x80\x9F\xBF",
    "Six-byte sequence (FC 80 80 80 9F BF)",
    "\xFC\x80\x80\x80\x9F\xBF",
    "",
    "Non-shortest forms for lowest three-byte (U+0800)",
    "",
    "Four-byte sequence (F0 80 A0 80)",
    "\xF0\x80\xA0\x80",
    "Five-byte sequence (F8 80 80 A0 80)",
    "\xF8\x80\x80\xA0\x80",
    "Six-byte sequence (FC 80 80 80 A0 80)",
    "\xFC\x80\x80\x80\xA0\x80",
    "",
    "Non-shortest forms for highest three-byte (U+FFFF)",
    "",
    "Four-byte sequence (F0 8F BF BF)",
    "\xF0\x8F\xBF\xBF",
    "Five-byte sequence (F8 80 8F BF BF)",
    "\xF8\x80\xBF\xBF\xBF",
    "Six-byte sequence (FC 80 80 8F BF BF)",
    "\xFC\x80\x80\x8F\xBF\xBF",
    "",
    "Non-shortest forms for lowest four-byte (U+10000)",
    "",
    "Five-byte sequence (F8 80 90 80 80)",
    "\xF8\x80\x90\x80\x80",
    "Six-byte sequence (FC 80 80 90 80 80)",
    "\xFC\x80\x80\x90\x80\x80",
    "",
    "Non-shortest forms for last Unicode (U+10FFFF)",
    "",
    "Five-byte sequence (F8 84 8F BF BF)",
    "\xF8\x84\xBF\xBF\xBF",
    "Six-byte sequence (FC 80 84 8F BF BF)",
    "\xFC\x80\x84\x8F\xBF\xBF",
    "",
    "Out of range",
    "",
    "One past Unicode (F4 90 80 80)",
    "\xF4\x90\x80\x80",
    "Longest five-byte sequence (FB BF BF BF BF)",
    "\xFB\xBF\xBF\xBF\xBF",
    "Longest six-byte sequence (FD BF BF BF BF BF)",
    "\xFD\xBF\xBF\xBF\xBF\xBF",
    "First surrogate (ED A0 80)",
    "\xED\xA0\x80",
    "Last surrogate (ED BF BF)",
    "\xED\xBF\xBF",
    "CESU-8 surrogate pair (ED A0 BD ED B2 A9)",
    "\xED\xA0\xBD\xED\xB2\xA9",
    "",
    "Out of range and non-shortest",
    "",
    "One past Unicode as five-byte sequence (F8 84 90 80 80)",
    "\xF8\x84\x90\x80\x80",
    "One past Unicode as six-byte sequence (FC 80 84 90 80 80)",
    "\xFC\x80\x84\x90\x80\x80",
    "First surrogate as four-byte sequence (F0 8D A0 80)",
    "\xF0\x8D\xA0\x80",
    "Last surrogate as four-byte sequence (F0 8D BF BF)",
    "\xF0\x8D\xBF\xBF",
    "CESU-8 surrogate pair as two four-byte overlongs (F0 8D A0 BD F0 8D B2 A9)",
    "\xF0\x8D\xA0\xBD\xF0\x8D\xB2\xA9",
    "",
    "Lone trails",
    "",
    "One (80)",
    "\x80",
    "Two (80 80)",
    "\x80\x80",
    "Three (80 80 80)",
    "\x80\x80\x80",
    "Four (80 80 80 80)",
    "\x80\x80\x80\x80",
    "Five (80 80 80 80 80)",
    "\x80\x80\x80\x80\x80",
    "Six (80 80 80 80 80 80)",
    "\x80\x80\x80\x80\x80\x80",
    "Seven (80 80 80 80 80 80 80)",
    "\x80\x80\x80\x80\x80\x80\x80",
    "After valid two-byte (C2 B6 80)",
    "\xC2\xB6\x80",
    "After valid three-byte (E2 98 83 80)",
    "\xE2\x98\x83\x80",
    "After valid four-byte (F0 9F 92 A9 80)",
    "\xF0\x9F\x92\xA9\x80",
    "After five-byte (FB BF BF BF BF 80)",
    "\xFB\xBF\xBF\xBF\xBF\x80",
    "After six-byte (FD BF BF BF BF BF 80)",
    "\xFD\xBF\xBF\xBF\xBF\xBF\x80",
    "",
    "Truncated sequences",
    "",
    "Two-byte lead (C2)",
    "\xC2",
    "Three-byte lead (E2)",
    "\xE2",
    "Three-byte lead and one trail (E2 98)",
    "\xE2\x98",
    "Four-byte lead (F0)",
    "\xF0",
    "Four-byte lead and one trail (F0 9F)",
    "\xF0\x9F",
    "Four-byte lead and two trails (F0 9F 92)",
    "\xF0\x9F\x92",
    "Truncated One past Unicode (F4 90 80)",
    "\xF4\x90\x80",
    "Truncated Non-shortest form (F0 80 A0)",
    "\xF0\x80\xA0",
    "",
    "Leftovers",
    "",
    "FE (FE)",
    "\xFE",
    "FE and trail (FE 80)",
    "\xFE\x80",
    "FF (FF)",
    "\xFF",
    "FF and trail (FF 80)",
    "\xFF\x80",
};

const char16_t* broken_utf16_test[] =
{
    u"Valid UTF-16",
    u"",
    u"Latin (1 code unit per code point) (0040 0041 0042)",
    u"ABC",
    u"Halfwidth and Fullwidth Forms (1 code unit per code point) (FF21 FF22 FF23)",
    u"\xFF21\xFF22\xFF23",
    u"Mathematical Alphanumeric Symbols (2 code units per code point - surrogate pair) (D835 DC00 D835 DC01 D835 DC02)",
    u"\xD835\xDC00\xD835\xDC01\xD835\xDC02",
    u"",
    u"",
    u"Broken UTF-16",
    u"",
    u"1 High surrogate without low (D800)",
    u"\xD800",
    u"2 High surrogates without low in a row (D800 DBFF)",
    u"\xD800\xDBFF",
    u"3 High surrogates without low in a row (D800 D800 DBFF)",
    u"\xD800\xD800\xDBFF",
    u"",
    u"1 High surrogate with wrong low (D800 0057)",
    u"\xD800\x0057",
    u"2 High surrogates with wrong low in a row (D800 0057 DBFF FF37)",
    u"\xD800\x0057\xDBFF\xFF37",
    u"3 High surrogates with wrong low in a row (D800 0057 D800 FF37 DBFF 0057)",
    u"\xD800\x0057\xD800\xFF37\xDBFF\x0057",
    u"",
    u"1 Leading low sorrogate (DC00)",
    u"\xDC00",
    u"2 Leading low sorrogates in a row (DC00 DFFF)",
    u"\xDC00\xDFFF",
    u"3 Leading low sorrogates in a row (DC00 DC00 DFFF)",
    u"\xDC00\xDC00\xDFFF",
    u"",
    u"1 Surrogate pair in backward order (DC00 D835)",
    u"\xDC00\xD835",
    u"2 Surrogate pairs in backward order (DC00 D835 DC01 D835)",
    u"\xDC00\xD835\xDC01\xD835",
    u"3 Surrogate pairs in backward order (DC00 D835 DC01 D835 DC02 D835)",
    u"\xDC00\xD835\xDC01\xD835\xDC02\xD835",
    u"",
    u"Lone high surrogate in sequence (0041 0042 D800 0043)",
    u"\x0041\x0042\xD800\x0043",
    u"Lone low surrogate in sequence (0041 0042 DC00 0043)",
    u"\x0041\x0042\xDC00\x0043",
    u"High surrogate with wrong low in sequence (0041 0042 D800 FF37 0043)",
    u"\x0041\x0042\xD800\xFF37\x0043",
};

const char32_t* broken_utf32_test[] =
{
    U"Valid UTF-32",
    U"",
    U"Latin (1 code unit per code point) (00000040 00000041 00000042)",
    U"ABC",
    U"Halfwidth and Fullwidth Forms (1 code unit per code point) (0000FF21 0000FF22 0000FF23)",
    U"\x0000FF21\x0000FF22\x0000FF23",
    U"Mathematical Alphanumeric Symbols (1 code unit per code point) (0001D400 0001D401 0001D402)",
    U"\x0001D400\x0001D401\x0001D402",
    U"",
    U"",
    U"Broken UTF-32",
    U"",
    U"1 High surrogate (0000D800)",
    U"\x0000D800",
    U"2 High surrogates in a row (0000D800 0000DBFF)",
    U"\x0000D800\x0000DBFF",
    U"",
    U"1 Low surrogate (0000DC00)",
    U"\x0000DC00",
    U"2 Low surrogates in a row (0000DC00 0000DFFF)",
    U"\x0000DC00\x0000DFFF",
    U"",
    U"1 Surrogate pair (0000D800 0000DC00)",
    U"\x0000D800\x0000DC00",
    U"2 Surrogate pairs (0000D800 0000DC00 0000DBFF 0000DFFF)",
    U"\x0000D800\x0000DC00\x0000DBFF\x0000DFFF",
    U"",
    U"1 Out of range (00110000)",
    U"\x00110000",
    U"2 Out of range (00110000 FFFFFFFF)",
    U"\x00110000\xFFFFFFFF",
    U"",
    U"Surrogate pair and out of range in sequence (00000041 0000D800 0000DC00 00000042 00110000 00000043)",
    U"\x00000041\x0000D800\x0000DC00\x00000042\x00110000\x00000043",
};

